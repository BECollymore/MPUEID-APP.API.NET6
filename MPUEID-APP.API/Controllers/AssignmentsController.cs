using Microsoft.AspNetCore.Mvc;
using MPUEID_APP.API.Models;
using Newtonsoft.Json;
using SurveySolutionsClient.Apis;
using SurveySolutionsClient.Models;
using System.Net;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace MPUEID_APP.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AssignmentsController : ControllerBase
    {
        private readonly ConnectAPI _connectaApi;
        private SurveySolutionsApi _client;
        private readonly IHttpClientFactory _httpClient;
        private readonly ILogger<AssignmentsController> _logger;
        private readonly ApiSettings _apiSettings;
        public AssignmentsController(ConnectAPI connectaApi,
            ILogger<AssignmentsController> logger,
            ApiSettings apiSettings,
            IHttpClientFactory client
            )
        {
            _connectaApi = connectaApi; 
            _logger = logger; 
            _apiSettings = apiSettings;
            _httpClient = client;

            try
            {
                //connect to API using credentials from ApiSettings
                _client = _connectaApi.Connect();
            }
            catch (Exception ex)
            {
                _logger.LogError($"The following Error was found accessing Survey Solutions API: {ex.Message}");
                throw;
            }
        }
        // POST api/<AssignmentsController>
        /// <summary>
        /// Create Survey Solutions Assignments
        /// </summary>
        /// <param name="assignment"></param>
        [HttpPost]
        public async Task<string> PostAsync([FromBody] AssignmentModel assignment)
        {

            /*
            //the code was autogenerated using a CURL to C# converter , https://curl.olsh.me/, to test api
            using (var httpClient = new HttpClient())
            {
                using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://wthomasconsulting.online/eid/api/v1/assignments"))
                {
                    request.Headers.TryAddWithoutValidation("accept", "text/plain");
                    request.Headers.TryAddWithoutValidation("Authorization", "Basic RWlkQXBpVXNlcjozaWRAcGlVc2VyNQ==");

                    request.Content = new StringContent("{\"Responsible\":\"eidinterviewer\",\"Quantity\":1,\"QuestionnaireId\":\"c477ccc4fd62480e879781b180b82dc3$11\",\"IdentifyingData\":[{\"Variable\":\"ADDRESS\",\"Answer\":\"Adress test 1\"},{\"Variable\":\"POLE\",\"Answer\":\"111\"}],\"Email\":\"test11@gmail.com\",\"Password\":\"?\",\"WebMode\":true,\"IsAudioRecordingEnabled\":true,\"Comments\":\"string\",\"ProtectedVariables\":[\"string\"]}");
                    request.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json-patch+json");

                    var response = await httpClient.SendAsync(request);
                    var statuscode = response.StatusCode.ToString();
                }
            }
            */

            SurveySolutionsClient.Models.QuestionnaireIdentity questionnaireIdentity =
               new SurveySolutionsClient.Models.QuestionnaireIdentity(Guid.Parse(_apiSettings.QuestionnaireId), _apiSettings.Version);

            try
            {
                string Username = _apiSettings.ApiUser;
                string Password = _apiSettings.Password;
                string url = $"{_apiSettings.URL}/{_apiSettings.Workspace}/api/v1/assignments";

                var request = new HttpRequestMessage(HttpMethod.Post, url);
                
                 if (assignment == null)
                {
                    return false;
                }
                else
                {
                    
                    //map AssignmentModel to Survey solutions json Model
                    Root susoJsonModel = new Root();
                    susoJsonModel.Responsible = assignment.Responsible;
                    susoJsonModel.QuestionnaireId = questionnaireIdentity.ToString();
                    susoJsonModel.Quantity = assignment.Quantity;
                    int length = typeof(IdentifyData).GetProperties().Length;
                    List<IdentifyingData> susoJsonIdentifyingData = new List<IdentifyingData>(length);
           
                    for (int i = 0; i < length; i++)
                    {
                        var item = new IdentifyingData();
                        switch (i)
                        {
                            case 0:
                                item.Variable = "ADDRESS";
                                item.Answer = assignment.identifyData.Address;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 1:
                                item.Variable = "DIRECTIONS";
                                item.Answer = assignment.identifyData.Directions;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 2:
                                item.Variable = "POLE";
                                item.Answer = assignment.identifyData.Pole;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 3:
                                item.Variable = "APPLICANT";
                                item.Answer = assignment.identifyData.Applicant;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 4:
                                item.Variable = "APPLICANT_TEL";
                                item.Answer = assignment.identifyData.ApplicantTel;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 5:
                                item.Variable = "WIREMAN_TEL";
                                item.Answer = assignment.identifyData.WiremanTel;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 6:
                                item.Variable = "ALTERNATE_TEL";
                                item.Answer = assignment.identifyData.AlternateTel;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 7:
                                item.Variable = "APPLICATION_NO";
                                item.Answer = assignment.identifyData.ApplicationNo;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 8:
                                item.Variable = "WIREMAN";
                                item.Answer = assignment.identifyData.Wireman;
                                susoJsonIdentifyingData.Add(item);
                                break;
                            case 9:
                                if(assignment.identifyData.InspectionType.Equals("1") ||
                                   assignment.identifyData.InspectionType.Equals("2"))
                                {
                                    item.Variable = "INSPECTION_TYPE";
                                    item.Answer = assignment.identifyData.InspectionType;
                                    susoJsonIdentifyingData.Add(item);
                                }
                                else
                                {
                                    _logger.LogError("INSPECTION_TYPE not equal 1 or 2");
                                }
                                break;
                            default:
                                break; 
                        }
                        
                    }
                    susoJsonModel.IdentifyingData = susoJsonIdentifyingData;
                    susoJsonModel.Email = assignment.Email;
                    //The email and password fields are mapped to the web mode field.
                    //When webmode=true, there is a bug (invalid password error) in the Suso Api endpoint for password.
                    //Invalid Password. At least 6 numbers and upper case letters (eg.PPP111) or single symbol '?' to generate password
                    susoJsonModel.Password = assignment.Password; // or autogenerate password using(?)
                    //if webmode is true then quantity = 1
                    if (assignment.WebMode) { susoJsonModel.Quantity = 1; }
                    susoJsonModel.WebMode = assignment.WebMode;
                    susoJsonModel.IsAudioRecordingEnabled = assignment.IsAudioRecordingEnabled; 
                    susoJsonModel.Comments = assignment.Comments;
                    //susoJsonModel.ProtectedVariables = new List<string>();
                    
                  

                    ////setup reusable http client
                    //HttpClient client1 = new HttpClient();
                    //Uri baseUri = new Uri(url);
                    //client1.BaseAddress = baseUri;
                    //client1.DefaultRequestHeaders.Clear();
                    //client1.DefaultRequestHeaders.ConnectionClose = true;

                    ////Post body content
                    //var values = new List<KeyValuePair<string, string>>();
                    //values.Add(new KeyValuePair<string, string>("grant_type", "client_credentials"));
                    //var content = new FormUrlEncodedContent(values);

                    //string clientId = "EidApiUser";
                    //string clientSecret = "3id@piUser5";
                    //var authenticationString = $"{clientId}:{clientSecret}";
                    //var base64EncodedAuthenticationString = Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(authenticationString));

                    //var requestMessage = new HttpRequestMessage(HttpMethod.Post, "/oauth2/token");
                    //requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Basic", base64EncodedAuthenticationString);
                    //requestMessage.Content = content;

                    ////make the request
                    //var task = client1.SendAsync(requestMessage);
                    //var response1 = task.Result;
                    //string statuscode = response1.StatusCode.ToString();
                    //response1.EnsureSuccessStatusCode();
                    //string responseBody = response1.Content.ReadAsStringAsync().Result;
                    //Console.WriteLine(responseBody);


                    //request.Headers.TryAddWithoutValidation("accept", "text/plain");
                    //request.Headers.TryAddWithoutValidation("Authorization", "Basic RWlkQXBpVXNlcjozaWRAcGlVc2VyNQ==");
                    //request.Content = new StringContent(JsonConvert.SerializeObject(susoJsonModel));
                    // request.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request.Content = new StringContent(JsonConvert.SerializeObject(susoJsonModel)
                    , Encoding.UTF8, "application/json");
                    //request.Headers.Add("Accept", "application/json-patch+json");
                    //request.Headers.Add("Authorization", "Basic RWlkQXBpVXNlcjozaWRAcGlVc2VyNQ==");

                    var client = _httpClient.CreateClient();
                    var authToken = Encoding.ASCII.GetBytes($"{Username}:{Password}"); 
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(authToken)); 
                    var result = await client.SendAsync(request);
                    string statuscode = result.StatusCode.ToString();

                    //if statuscode is badrequest log content with error
                    var content = await result.Content.ReadAsStringAsync();
                    if(result.StatusCode == System.Net.HttpStatusCode.BadRequest)
                    {
                        _logger.LogError(content);
                    }

                    return content;

                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return ex.Message;
                
            }
            
        }

    }
}
